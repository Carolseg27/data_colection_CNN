import numpy as np 
import math
import random
import time 
'''
tic = time.time()

numEpocas = 10

x = np.array([-136.84,-69.49,-70.67,-70.11,-135.84,-134.97,-88.16,-97.48,-134.12,-133.16,-132.15,-86.35])
y = np.array([-307.95,-122.20,-130.90,-136.49,-306.92,-306.02,-315.01,-477.49,-305.34,-304.35,-303.31,-324.00])
z = np.array([-319.86,-1285.88,-1284.94,-1285.940,-322.81,-325.96,-1298.24,-1292.26,-329.06,-332.14,-335.13,-1264.24])

q = 12
bias = np.ones(q)
bias = bias.reshape(1,q)
Y = np.array([1,-1,-1,-1,1,1,-1,-1,1,1,1,-1]) #braço esticado na horizontal (-1), pra cima (1)

Xb = np.vstack((x, y, z, bias)).T # Xb tem shape (q,4)

eta = 0.0001

W = np.random.rand(1,4) #uma coluna pra cada coordenada + bias
#W = np.zeros([1,4]) 

e = np.random.rand(q)  #vetor erro
#e = np.zeros(q)

def funcaoAtivacao(valor):
   
    if valor < 0.0:
        return(-1)
    else:
        return(1)

for j in range (numEpocas):
    for k in range (q):
    
        V = np.dot(Xb,W.T) #vetor coluna de 'q' linhas
        v = V[k] 
        Yr = funcaoAtivacao(v)
        print("Yr=",Yr,"v=",v,"Y[k]=",Y[k],"Y[k] - Yr ", Y[k] - Yr )
        e[k] =Y[k] - Yr 
        e = e.reshape(q,1)
        b = eta*np.dot(e.T,Xb)
        W = W + b #equação da reta de decisão

print('Vetor de erro(e) = ', e.T)
#print('Tamanho do Vetor de erro(e) = ',e.shape)
print('Vetor de pesos(W) = ' + str(W))
#print('Tamanho do Vetor do pesos(W)  = ', W.shape)
print('Vetor b = ' + str(b))
#print('Tamanho do Vetor b  = ', b.shape)
toc = time.time()
tempo_execucao = 1000*(toc-tic) 
print("tempo de execução:",tempo_execucao,"ms")

non_zero_values = np.count_nonzero(e)
percent_efficiency = ((q - non_zero_values)/q)*100
print(percent_efficiency)

#################### (CÓDIGO COM 12 AMOSTRAS)

#essas sao as coordenadas com o braço esticado pra baixo 

down = np.matrix([[82.03,4.76,-129.18],
[82.02,4.78,-129.18],
[81.99,4.80,-129.19],
[81.97,4.83,-129.19],
[81.95,4.86,-129.19],
[81.94,4.88,-129.20],
[81.92,4.90,-129.21],
[81.91,4.92,-129.21],
[81.88,4.98,-129.24],
[81.88,4.99,-129.25],
[81.87,5.00,-129.26],
[81.88,5.01,-129.26],
[81.96,4.99,-129.32],
[81.99,4.97,-129.32],
[82.01,4.96,-129.33],
[82.02,4.94,-129.34],
[82.05,4.92,-129.35],
[82.07,4.90,-129.35],
[82.09,4.88,-129.36],
[82.11,4.85,-129.37],
[82.13,4.84,-129.37],
[82.15,4.82,-129.38],
[82.16,4.80,-129.38],
[82.23,4.75,-129.39],
[82.24,4.74,-129.40],
[82.25,4.74,-129.40],
[82.25,4.74,-129.40],
[82.26,4.75,-129.40],
[82.26,4.75,-129.40],
[82.27,4.75,-129.40],
[82.27,4.76,-129.40],
[82.28,4.78,-129.40],
[82.28,4.79,-129.40],
[82.27,4.81,-129.41],
[82.27,4.84,-129.41],
[82.27,4.86,-129.41],
[82.25,4.88,-129.41],
[82.24,4.92,-129.42],
[82.23,4.95,-129.42],
[82.21,4.98,-129.43],
[82.20,5.01,-129.43],
[82.19,5.04,-129.43],
[82.21,4.89,-129.67],
[82.20,4.90,-129.67],
[82.19,4.92,-129.67],
[82.17,4.94,-129.67],
[82.15,4.97,-129.67],
[82.13,4.99,-129.67],
[82.11,5.03,-129.68],
[82.10,5.06,-129.68],
[82.07,5.09,-129.68],
[82.04,5.13,-129.69],
[82.02,5.16,-129.69],
[81.98,5.20,-129.70],
[81.96,5.24,-129.71],
[81.93,5.28,-129.71],
[81.90,5.32,-129.72],
[81.87,5.35,-129.73],
[81.85,5.38,-129.74],
[81.82,5.41,-129.75],
[81.80,5.43,-129.76],
[81.70,5.47,-129.89],
[81.70,5.46,-129.90],
[81.69,5.44,-129.91],
[81.68,5.44,-129.92],
[81.68,5.42,-129.93],
[81.67,5.41,-129.94],
[81.67,5.41,-129.95],
[81.65,5.33,-129.95],
[81.62,5.22,-129.95],
[81.59,5.11,-129.94],
[81.57,4.98,-129.93],
[81.49,4.73,-129.89],
[81.44,4.63,-129.87],
[81.37,4.53,-129.84],
[80.47,4.04,-129.38],
[80.35,4.05,-129.30],
[80.27,4.05,-129.25],
[80.18,4.05,-129.20],
[80.11,4.05,-129.15],
[79.99,4.09,-129.07],
[79.92,4.10,-129.01],
[79.75,4.17,-128.88],
[79.68,4.19,-128.83],
[79.62,4.22,-128.78],
[79.57,4.24,-128.72],
[79.48,4.29,-128.64],
[79.08,4.62,-128.14],
[79.03,4.68,-128.07],
[79.02,4.70,-128.02],
[79.00,4.73,-127.98],
[78.98,4.77,-127.93],
[78.94,4.81,-127.87],
[78.89,4.85,-127.81],
[78.87,4.89,-127.77],
[78.87,4.92,-127.73],
[78.83,4.96,-127.67],
[78.82,5.00,-127.64],
[78.82,5.03,-127.61],
[78.82,5.07,-127.58]])

sample = np.ones(100)*-1
sample = sample.reshape(100,1) # é para ter certeza que essa matriz é de tamanho 100 por 1
down_samples = np.append(down, sample, axis=1) # add uma coluna de 1's na matriz down 
'''
##########################

############# CÓDIGO COM 200 AMOSTRAS 
#braço esticado pra cima (1)
up = np.matrix([[70.54,-13.78,-146.18],
[70.51,-13.79,-146.14],
[70.46,-13.98,-146.09],
[70.43,-13.96,-146.05],
[70.38,-13.92,-146.03],
[70.35,-14.09,-145.99],
[70.34,-14.05,-145.97],
[70.34,-14.04,-145.96],
[70.35,-14.03,-145.95],
[70.38,-14.03,-145.95],
[70.43,-14.03,-145.96],
[70.47,-14.03,-145.96],
[70.50,-14.15,-145.98],
[70.54,-14.12,-145.99],
[70.58,-14.07,-146.00],
[70.61,-14.15,-146.01],
[70.61,-14.21,-146.03],
[70.61,-14.14,-146.04],
[70.61,-14.08,-146.05],
[70.61,-14.00,-146.06],
[70.60,-14.03,-146.08],
[70.58,-13.94,-146.09],
[70.57,-13.84,-146.10],
[70.56,-13.85,-146.13],
[70.54,-13.73,-146.15],
[70.49,-13.48,-146.19],
[70.46,-13.37,-146.22],
[70.44,-13.25,-146.24],
[70.41,-13.13,-146.27],
[70.37,-13.10,-146.32],
[70.33,-12.97,-146.35],
[70.29,-12.85,-146.39],
[70.23,-12.83,-146.44],
[70.19,-12.72,-146.47],
[70.14,-12.60,-146.51],
[70.07,-12.59,-146.57],
[70.03,-12.48,-146.61],
[69.98,-12.39,-146.65],
[69.93,-12.31,-146.69],
[69.86,-12.33,-146.77],
[69.82,-12.27,-146.82],
[69.79,-12.22,-146.87],
[69.72,-12.25,-146.96],
[69.70,-12.21,-147.02],
[69.67,-12.17,-147.07],
[69.64,-12.13,-147.13],
[69.61,-12.10,-147.19],
[69.58,-12.06,-147.25],
[69.54,-12.04,-147.31],
[69.47,-12.08,-147.39],
[69.43,-12.06,-147.45],
[69.39,-12.06,-147.50],
[69.32,-12.10,-147.59],
[69.29,-12.10,-147.64],
[69.25,-12.09,-147.69],
[69.22,-12.10,-147.74],
[69.15,-12.15,-147.82],
[69.12,-12.15,-147.87],
[69.05,-12.20,-147.94],
[69.03,-12.20,-147.98],
[68.98,-12.25,-148.05],
[68.97,-12.25,-148.09],
[68.97,-12.25,-148.12],
[68.94,-12.29,-148.18],
[68.93,-12.28,-148.21],
[68.93,-12.26,-148.24],
[68.94,-12.23,-148.27],
[68.93,-12.24,-148.31],
[68.94,-12.19,-148.33],
[68.97,-12.12,-148.36],
[68.99,-12.09,-148.40],
[69.03,-12.00,-148.42],
[69.06,-11.92,-148.45],
[69.10,-11.87,-148.49],
[69.15,-11.79,-148.53],
[69.20,-11.72,-148.56],
[69.26,-11.64,-148.59],
[69.31,-11.60,-148.64],
[69.38,-11.53,-148.67],
[69.43,-11.46,-148.70],
[69.48,-11.41,-148.75],
[69.53,-11.33,-148.79],
[69.58,-11.27,-148.82],
[69.63,-11.21,-148.86],
[69.68,-11.14,-148.90],
[69.72,-11.07,-148.93],
[69.76,-11.00,-148.96],
[69.79,-10.94,-149.01],
[69.83,-10.86,-149.04],
[69.86,-10.79,-149.07],
[69.89,-10.73,-149.12],
[69.90,-10.67,-149.15],
[69.92,-10.60,-149.18],
[69.93,-10.54,-149.21],
[69.94,-10.49,-149.26],
[69.94,-10.45,-149.29],
[69.94,-10.42,-149.31],
[69.94,-10.41,-149.36],
[69.92,-10.40,-149.38],
[69.91,-10.39,-149.41]])

#braço esticado na horizontal (-1)
horizontal = np.matrix([[8.68,-19.42,-826.48],
[8.73,-19.24,-826.72],
[8.80,-19.08,-826.98],
[8.90,-18.67,-827.36],
[9.00,-18.53,-827.63],
[9.15,-18.38,-827.89],
[9.32,-18.26,-828.14],
[9.52,-17.89,-828.53],
[10.65,-16.94,-829.89],
[10.91,-16.84,-830.08],
[11.17,-16.47,-830.34],
[11.44,-16.36,-830.50],
[11.71,-16.24,-830.65],
[11.97,-16.13,-830.78],
[12.23,-16.03,-830.89],
[12.49,-15.95,-830.99],
[12.75,-15.88,-831.08],
[12.98,-15.57,-831.20],
[13.21,-15.53,-831.26],
[13.43,-15.47,-831.32],
[13.65,-15.14,-831.39],
[14.45,-14.41,-831.54],
[14.63,-14.25,-831.57],
[14.80,-13.81,-831.62],
[14.92,-13.61,-831.65],
[15.02,-13.39,-831.68],
[15.10,-13.13,-831.72],
[15.19,-12.58,-831.78],
[15.22,-12.24,-831.82],
[15.22,-11.88,-831.87],
[15.09,-9.05,-832.30],
[15.02,-8.54,-832.40],
[14.94,-8.03,-832.50],
[14.86,-7.52,-832.61],
[14.79,-6.77,-832.79],
[14.69,-6.28,-832.92],
[14.99,0.22,-834.99],
[15.16,0.95,-835.20],
[15.30,1.43,-835.34],
[15.47,1.92,-835.47],
[15.65,2.42,-835.60],
[15.85,3.16,-835.79],
[16.04,3.64,-835.91],
[16.24,4.11,-836.03],
[16.45,4.82,-836.19],
[16.65,5.29,-836.30],
[16.87,5.74,-836.40],
[17.10,6.41,-836.55],
[17.32,6.82,-836.64],
[17.54,7.22,-836.72],
[17.77,7.62,-836.80],
[18.00,8.26,-836.90],
[18.24,8.67,-836.96],
[18.48,9.08,-837.02],
[18.70,9.73,-837.10],
[18.91,10.16,-837.15],
[19.10,10.59,-837.20],
[19.28,11.02,-837.24],
[19.46,11.73,-837.31],
[19.60,12.18,-837.35],
[19.73,12.65,-837.39],
[19.86,13.38,-837.46],
[20.21,17.13,-837.85],
[20.19,17.68,-837.92],
[20.17,18.22,-837.99],
[20.14,18.76,-838.07],
[20.11,19.56,-838.19],
[20.06,20.11,-838.28],
[19.98,20.64,-838.38],
[19.39,27.14,-839.56],
[19.41,27.69,-839.64],
[19.46,28.21,-839.73],
[20.43,33.47,-840.37],
[20.53,34.31,-840.44],
[20.64,34.92,-840.48],
[20.64,42.97,-841.15],
[20.63,43.47,-841.22],
[20.13,49.89,-842.46],
[20.11,50.35,-842.58],
[20.08,50.81,-842.70],
[20.07,51.52,-842.87],
[20.02,51.99,-842.99],
[19.98,52.48,-843.10],
[19.89,53.26,-843.26],
[19.83,53.80,-843.37],
[19.77,54.33,-843.47],
[19.72,54.88,-843.56],
[19.71,55.67,-843.70],
[19.72,56.70,-843.87],
[19.77,57.44,-843.97],
[19.82,57.90,-844.04],
[19.87,58.38,-844.10],
[19.90,59.11,-844.17],
[19.93,59.58,-844.22],
[19.97,60.03,-844.25],
[19.99,60.74,-844.30],
[20.02,61.19,-844.32],
[20.05,61.62,-844.34],
[20.06,62.03,-844.35],
[20.03,62.69,-844.35]])

import time 
tic = time.time()
bias = np.ones(100)
bias = bias.reshape(100,1)
ones = np.ones(100) # esse vetor de 1s é para classificar o movimento em 1 
ones = ones.reshape(100,1) # é para ter certeza que essa matriz é de tamanho 100 por 1
up_bias = np.append(up, bias, axis=1)
up_bias_ones = np.append(up_bias, ones, axis=1) # add uma coluna de 1's na matriz selecionada

n_ones = np.ones(100)*-1  # esse vetor de 1s é para classificar o movimento em -1
n_ones = n_ones.reshape(100,1) # é para ter certeza que essa matriz é de tamanho 100 por 1
hor_bias = np.append(horizontal, bias, axis=1) # add uma coluna de bias na matriz selecionada
hor_bias_n_ones = np.append(hor_bias, n_ones, axis=1) # add uma coluna de 1's na matriz selecionada

all_samples = np.append(up_bias_ones,hor_bias_n_ones,axis=0) # junta as matrizes
data_shuffled = np.take(all_samples,np.random.permutation(all_samples.shape[0]),axis=0,out=all_samples) #organiza de forma aleatória as linhas

numEpocas = 5
T = data_shuffled.T

Y = T[4,:] #seleciona a linha 4 como Y, já que são 5 linhas numeradas de 0 a 4, logo Y tem shape (1,200)
X = T[:4,:] #seleciona todas as linhas menos a última como X, X com o shape (4,200)
Xb = X.T

q = 200  #quantidade de amostras
eta = 0.001 #taxa de aprendizagem

#W = np.random.rand(1,4) #uma coluna pra cada coordenada + bias
W = np.zeros([1,4]) 

#e = np.random.rand(q)  #vetor erro
e = np.zeros(q)

def funcaoAtivacao(valor):
   
    if valor < 0.0:
        return(-1)
    else:
        return(1)

for j in range (numEpocas):
    for k in range (q):

        V = np.dot(Xb,W.T) #vetor coluna de 'q' linhas
        v = V[k] 
        Yr = funcaoAtivacao(v)
        e[k] =Y.T[k] - Yr
        e = e.reshape(q,1)
        b = eta*np.dot(e.T,Xb)
        W = W + b #equação da reta de decisão

print('Vetor de erro(e) = ', e.T)
#print('Tamanho do Vetor de erro(e) = ',e.shape)
print('Vetor de pesos(W) = ' + str(W))
#print('Tamanho do Vetor do pesos(W)  = ', W.shape)
print('Vetor b = ' + str(b))
#print('Tamanho do Vetor b  = ', b.shape)
toc = time.time()
tempo_execucao = 1000*(toc-tic) 
print("tempo de execução:",tempo_execucao,"ms")

non_zero_values = np.count_nonzero(e)
percent_efficiency = ((q - non_zero_values)/q)*100
print(percent_efficiency)